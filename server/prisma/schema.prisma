generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model BOOKMARK {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  feed_id    Int
  user_email String
  FEED       FEED     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  USER       USER     @relation(fields: [user_email], references: [email], onDelete: Cascade)

  @@index([feed_id], map: "BOOKMARK_feed_id_fkey")
  @@index([user_email], map: "BOOKMARK_user_email_fkey")
}

model COMMENT {
  id         Int      @id @default(autoincrement())
  contents   String
  user_email String
  feed_id    Int
  createdAt  DateTime @default(now())
  FEED       FEED     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  USER       USER     @relation(fields: [user_email], references: [email])

  @@index([feed_id], map: "COMMENT_feed_id_fkey")
  @@index([user_email], map: "COMMENT_user_email_fkey")
}

model FEED {
  createdAt  DateTime    @default(now())
  title      String      @db.Char(100)
  group_id   Int
  id         Int         @id @default(autoincrement())
  updatedAt  DateTime    @default(now())
  url        String      @db.Char(100)
  user_email String
  BOOKMARK   BOOKMARK[]
  COMMENT    COMMENT[]
  GROUP      GROUP       @relation(fields: [group_id], references: [id])
  USER       USER        @relation(fields: [user_email], references: [email])
  HIGHLIGHT  HIGHLIGHT[]
  NOTI       NOTI[]
  TAG        TAG[]       @relation("FeedToTag")

  @@index([group_id], map: "FEED_group_id_fkey")
  @@index([user_email], map: "FEED_user_email_fkey")
}

model GROUP {
  id         Int    @id @default(autoincrement())
  name       String @db.Char(20)
  group_code String @db.Char(100)
  FEED       FEED[]
  USER       USER[]
  TAG        TAG[]  @relation("GroupToTag")
}

model HIGHLIGHT {
  createdAt  DateTime @default(now())
  feed_id    Int
  id         Int      @id @default(autoincrement())
  selection  Json
  user_email String
  contents   String
  type       Int
  color      String   @db.Char(10)
  FEED       FEED     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  USER       USER     @relation(fields: [user_email], references: [email])

  @@index([feed_id], map: "HIGHLIGHT_feed_id_fkey")
  @@index([user_email], map: "HIGHLIGHT_user_email_fkey")
}

model NOTI {
  id                          Int      @id @default(autoincrement())
  contents                    String
  isRead                      Boolean  @default(false)
  feed_id                     Int
  createdAt                   DateTime @default(now())
  receiver_id                 String
  sender_id                   String
  FEED                        FEED     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  USER_NOTI_receiver_idToUSER USER     @relation("NOTI_receiver_idToUSER", fields: [receiver_id], references: [email])
  USER_NOTI_sender_idToUSER   USER     @relation("NOTI_sender_idToUSER", fields: [sender_id], references: [email])

  @@index([feed_id], map: "NOTI_feed_id_fkey")
  @@index([receiver_id], map: "receiver_id")
  @@index([sender_id], map: "sender_id")
}

model TAG {
  tag_name String  @id
  FEED     FEED[]  @relation("FeedToTag")
  GROUP    GROUP[] @relation("GroupToTag")
}

model USER {
  email                       String      @id @db.Char(50)
  group_id                    Int?
  nickname                    String?     @db.Char(20)
  password                    String      @db.Char(100)
  image                       String
  BOOKMARK                    BOOKMARK[]
  COMMENT                     COMMENT[]
  FEED                        FEED[]
  HIGHLIGHT                   HIGHLIGHT[]
  NOTI_NOTI_receiver_idToUSER NOTI[]      @relation("NOTI_receiver_idToUSER")
  NOTI_NOTI_sender_idToUSER   NOTI[]      @relation("NOTI_sender_idToUSER")
  GROUP                       GROUP?      @relation(fields: [group_id], references: [id])

  @@index([group_id], map: "USER_group_id_fkey")
}
