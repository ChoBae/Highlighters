generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< Updated upstream
  email                       String      @id @db.Char(50)
  group_id                    Int?
  nickname                    String?     @db.Char(20)
  password                    String      @db.Char(100)
  image                       String
  COMMENT                     COMMENT[]
  Feed                        Feed[]
  highlight                   Highlight[]
  NOTI_NOTI_receiver_idToUSER NOTI[]      @relation("NOTI_receiver_idToUSER")
  NOTI_NOTI_sender_idToUSER   NOTI[]      @relation("NOTI_sender_idToUSER")
  group                       Group?      @relation(fields: [group_id], references: [id])
=======
  email     String      @id @db.Char(50)
  group_id  Int?
  nickname  String?     @db.Char(20)
  password  String      @db.Char(100)
  image     String?     @db.Char(100)
  COMMENT   COMMENT[]
  Feed      Feed[]
  highlight Highlight[]
  NOTI      NOTI[]
  group     Group?      @relation(fields: [group_id], references: [id])
>>>>>>> Stashed changes

  @@index([group_id], map: "USER_group_id_fkey")
  @@map("USER")
}

model Group {
  id         Int    @id @default(autoincrement())
  name       String @db.Char(20)
  group_code String @db.Char(100)
  Feed       Feed[]
  member     User[]
  TAG        TAG[]  @relation("GroupToTag")

  @@map("GROUP")
}

model Feed {
  createdAt    DateTime    @default(now())
  title        String      @db.Char(100)
  group_id     Int
  id           Int         @id @default(autoincrement())
  updatedAt    DateTime    @default(now()) @updatedAt
  url          String      @db.Char(100)
  user_email   String
  COMMENT      COMMENT[]
  group        Group       @relation(fields: [group_id], references: [id])
  user         User        @relation(fields: [user_email], references: [email])
  highlight_id Highlight[]
  NOTI         NOTI[]
  TAG          TAG[]       @relation("FeedToTag")

  @@index([group_id], map: "FEED_group_id_fkey")
  @@index([user_email], map: "FEED_user_email_fkey")
  @@map("FEED")
}

model Highlight {
  createdAt  DateTime @default(now())
  feed_id    Int
  id         Int      @id @default(autoincrement())
  selection  Json
  user_email String
  contents   String
  type       Int
  color      String   @db.Char(10)
  feed       Feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_email], references: [email])

  @@index([feed_id], map: "HIGHLIGHT_feed_id_fkey")
  @@index([user_email], map: "HIGHLIGHT_user_email_fkey")
  @@map("HIGHLIGHT")
}

model COMMENT {
  id         Int      @id @default(autoincrement())
  contents   String
  user_email String
  feed_id    Int
  createdAt  DateTime @default(now())
  FEED       Feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  USER       User     @relation(fields: [user_email], references: [email])

  @@index([feed_id], map: "COMMENT_feed_id_fkey")
  @@index([user_email], map: "COMMENT_user_email_fkey")
}

model NOTI {
<<<<<<< Updated upstream
  id                          Int      @id @default(autoincrement())
  contents                    String
  isRead                      Boolean  @default(false)
  feed_id                     Int
  createdAt                   DateTime @default(now())
  receiver_id                 String
  sender_id                   String
  FEED                        Feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  USER_NOTI_receiver_idToUSER User     @relation("NOTI_receiver_idToUSER", fields: [receiver_id], references: [email])
  USER_NOTI_sender_idToUSER   User     @relation("NOTI_sender_idToUSER", fields: [sender_id], references: [email])

  @@index([feed_id], map: "NOTI_feed_id_fkey")
  @@index([receiver_id], map: "receiver_id")
  @@index([sender_id], map: "sender_id")
=======
  id       Int     @id @default(autoincrement())
  contents String
  isRead   Boolean @default(true)
  user_id  String
  feed_id  Int
  FEED     Feed    @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  USER     User    @relation(fields: [user_id], references: [email])

  @@index([feed_id], map: "NOTI_feed_id_fkey")
  @@index([user_id], map: "NOTI_user_id_fkey")
>>>>>>> Stashed changes
}

model TAG {
  tag_name String  @id
  FEED     Feed[]  @relation("FeedToTag")
  GROUP    Group[] @relation("GroupToTag")
}
