generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  email        String        @id @db.Char(50)
  group_id     Int?
  nickname     String?       @db.Char(20)
  image        String        @db.Text
  password     String
  new_noti     Boolean       @default(false)
  bookmark     Bookmark[]
  comment      Comment[]
  Feed         Feed[]
  Highcomment  Highcomment[]
  highlight    Highlight[]
  receive_noti Noti[]        @relation("receiver")
  send_noti    Noti[]        @relation("sender")
  group        Group?        @relation(fields: [group_id], references: [id])

  @@index([group_id], map: "USER_group_id_fkey")
  @@map("USER")
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String      @db.Char(20)
  group_code String      @unique @db.Char(20)
  Feed       Feed[]
  highlight  Highlight[]
  tag        Tag[]       @relation("GroupToTag")
  member     User[]

  @@map("GROUP")
}

model Feed {
  createdAt  DateTime    @default(now())
  title      String      @db.Char(100)
  group_id   Int
  id         Int         @id @default(autoincrement())
  updatedAt  DateTime    @default(now()) @updatedAt
  url        String      @db.Text
  user_email String
  og_id      Int
  bookmark   Bookmark[]
  comment    Comment[]
  group      Group       @relation(fields: [group_id], references: [id], onDelete: Cascade)
  og         Og          @relation("FeedToOg", fields: [og_id], references: [id])
  user       User        @relation(fields: [user_email], references: [email])
  highlight  Highlight[]
  noti       Noti[]
  tag        Tag[]       @relation("FeedToTag")

  @@index([group_id], map: "FEED_group_id_fkey")
  @@index([user_email], map: "FEED_user_email_fkey")
  @@index([og_id], map: "FEED_og_id_fkey")
  @@map("FEED")
}

model Og {
  id          Int    @id @default(autoincrement())
  title       String
  image       String @db.Text
  description String
  feed_id     Int
  feed        Feed[] @relation("FeedToOg")

  @@index([feed_id], map: "OG_feed_id_fkey")
  @@map("OG")
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  feed_id    Int
  user_email String
  feed       Feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_email], references: [email], onDelete: Cascade)

  @@index([feed_id], map: "BOOKMARK_feed_id_fkey")
  @@index([user_email], map: "BOOKMARK_user_email_fkey")
  @@map("BOOKMARK")
}

model Comment {
  id         Int      @id @default(autoincrement())
  contents   String
  user_email String
  feed_id    Int
  createdAt  DateTime @default(now())
  feed       Feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_email], references: [email])

  @@index([feed_id], map: "COMMENT_feed_id_fkey")
  @@index([user_email], map: "COMMENT_user_email_fkey")
  @@map("COMMENT")
}

model Tag {
  id       Int    @id @default(autoincrement())
  tag_name String @db.Char(20)
  group_id Int
  group    Group  @relation("GroupToTag", fields: [group_id], references: [id], onDelete: Cascade)
  feed     Feed[] @relation("FeedToTag")

  @@index([group_id], map: "TAG_group_id_fkey")
  @@map("TAG")
}

model Highlight {
  createdAt   DateTime      @default(now())
  feed_id     Int
  id          Int           @id @default(autoincrement())
  selection   Json
  user_email  String
  contents    String        @db.Text
  type        Int
  color       String        @db.Char(10)
  group_id    Int
  highcomment Highcomment[]
  feed        Feed          @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  group       Group         @relation(fields: [group_id], references: [id])
  user        User          @relation(fields: [user_email], references: [email])

  @@index([feed_id], map: "HIGHLIGHT_feed_id_fkey")
  @@index([user_email], map: "HIGHLIGHT_user_email_fkey")
  @@index([group_id], map: "HIGHLIGHT_group_id_fkey")
  @@map("HIGHLIGHT")
}

model Highcomment {
  id           Int       @id @default(autoincrement())
  contents     String
  user_email   String
  highlight_id Int
  createdAt    DateTime  @default(now())
  highlight    Highlight @relation(fields: [highlight_id], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [user_email], references: [email])

  @@index([highlight_id], map: "HIGHCOMMENT_highlight_id_fkey")
  @@index([user_email], map: "HIGHCOMMENT_user_email_fkey")
  @@map("HIGHCOMMENT")
}

model Noti {
  id          Int      @id @default(autoincrement())
  contents    String
  isRead      Boolean  @default(false)
  feed_id     Int
  createdAt   DateTime @default(now())
  receiver_id String
  sender_id   String
  feed        Feed     @relation(fields: [feed_id], references: [id], onDelete: Cascade)
  receiver    User     @relation("receiver", fields: [receiver_id], references: [email])
  sender      User     @relation("sender", fields: [sender_id], references: [email])

  @@index([feed_id], map: "NOTI_feed_id_fkey")
  @@index([sender_id], map: "sender_id")
  @@index([receiver_id], map: "receiver_id")
  @@map("NOTI")
}
